# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: image_swap.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='image_swap.proto',
  package='',
  syntax='proto3',
  serialized_options=None,
  serialized_pb=_b('\n\x10image_swap.proto\"6\n\x0bImageFileIn\x12\x13\n\x0binput_image\x18\x01 \x01(\t\x12\x12\n\nmeme_image\x18\x02 \x01(\t\"!\n\x0cImageFileOut\x12\x11\n\timage_out\x18\x01 \x01(\t25\n\x08\x46\x61\x63\x65Swap\x12)\n\x08\x66\x61\x63\x65Swap\x12\x0c.ImageFileIn\x1a\r.ImageFileOut\"\x00\x62\x06proto3')
)




_IMAGEFILEIN = _descriptor.Descriptor(
  name='ImageFileIn',
  full_name='ImageFileIn',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='input_image', full_name='ImageFileIn.input_image', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='meme_image', full_name='ImageFileIn.meme_image', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=20,
  serialized_end=74,
)


_IMAGEFILEOUT = _descriptor.Descriptor(
  name='ImageFileOut',
  full_name='ImageFileOut',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='image_out', full_name='ImageFileOut.image_out', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=76,
  serialized_end=109,
)

DESCRIPTOR.message_types_by_name['ImageFileIn'] = _IMAGEFILEIN
DESCRIPTOR.message_types_by_name['ImageFileOut'] = _IMAGEFILEOUT
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

ImageFileIn = _reflection.GeneratedProtocolMessageType('ImageFileIn', (_message.Message,), {
  'DESCRIPTOR' : _IMAGEFILEIN,
  '__module__' : 'image_swap_pb2'
  # @@protoc_insertion_point(class_scope:ImageFileIn)
  })
_sym_db.RegisterMessage(ImageFileIn)

ImageFileOut = _reflection.GeneratedProtocolMessageType('ImageFileOut', (_message.Message,), {
  'DESCRIPTOR' : _IMAGEFILEOUT,
  '__module__' : 'image_swap_pb2'
  # @@protoc_insertion_point(class_scope:ImageFileOut)
  })
_sym_db.RegisterMessage(ImageFileOut)



_FACESWAP = _descriptor.ServiceDescriptor(
  name='FaceSwap',
  full_name='FaceSwap',
  file=DESCRIPTOR,
  index=0,
  serialized_options=None,
  serialized_start=111,
  serialized_end=164,
  methods=[
  _descriptor.MethodDescriptor(
    name='faceSwap',
    full_name='FaceSwap.faceSwap',
    index=0,
    containing_service=None,
    input_type=_IMAGEFILEIN,
    output_type=_IMAGEFILEOUT,
    serialized_options=None,
  ),
])
_sym_db.RegisterServiceDescriptor(_FACESWAP)

DESCRIPTOR.services_by_name['FaceSwap'] = _FACESWAP

# @@protoc_insertion_point(module_scope)
